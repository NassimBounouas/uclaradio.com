#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('uclaradio.github.io:server');
var http = require('http');


// Get command-line argument (node bin/www dev)
// Possible values:
//   * dev: development environment, run on port 3000 with http
//   * prod: production, run on port 80 with https
//
var env = process.argv[2] || 'dev';
switch (env) {
    case 'dev':
        var port = normalizePort(process.env.PORT || '3000');
        var useSSL = false;
        break;
    case 'prod':
        var port = normalizePort(process.env.PORT || '80');
        var useSSL = true;
        break;
}


app.set('port', port);

if (useSSL) {
  var uclaradioHostname = "uclaradio.com";
  var webEmail = "radio.web@media.ucla.edu";
  /**
   * Create HTTP(S) server.
   */
  var https = require('spdy');
  var LEX = require('letsencrypt-express').testing();
  var lex = LEX.create({
      configDir: require('os').homedir() + '/letsencrypt/etc',
      approveRegistration: function (hostname, approve) {
        if (hostname === uclaradioHostname) {
          approve(null, {
            domains: [hostname],
            email: webEmail,
            agreeTos: true
           });
          }
        }
      });
  http.createServer(LEX.createAcmeResponder(lex, function redirectHttps(req, res) {
      res.setHeader('Location', 'https://' + req.headers.host + req.url);
      res.statusCode = 302;
      res.end('<!-- Please use HTTPS instead -->');
  })).listen(80);
  var server = https.createServer(lex.httpsOptions, LEX.createAcmeResponder(lex, app)).listen(443);
}
else {
  var server = http.createServer(app);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}